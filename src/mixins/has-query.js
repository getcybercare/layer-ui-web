
// /**
//  * A Mixin for main components (not needed for subcomponents) that provides common properties, shortcuts and code.
//  *
//  * @class layerUI.mixins.MainComponent
//  */
// module.exports = {
//   properties: {

//     /**
//      * A Query ID identifies the layer.Query that provides the Messages we are to render and page through.
//      *
//      * You may instead use the query property instead of queryId, however, if putting the value within an HTML attribute
//      * rather than doing DOM manipulation, only string values work.
//      *
//      * @property {String}
//      */
//     queryId: {
//       set: function(value) {
//         if (value && value.indexOf('layer:///') !== 0) this.properties.queryId = '';
//         if (this.properties.client && this.queryId) {
//           this.query = this.properties.client.getQuery(this.queryId);
//         }
//       }
//     },

//     /**
//      * A Query identifies the Messages we are to render and page through.
//      *
//      * Recommend using layerUI.Conversation.queryId if putting this into an HTML template.
//      *
//      * @property {layer.Query}
//      */
//     query: {
//       set: function(value) {
//         if (value instanceof layer.Query) {
//           this._updateQuery();
//         }
//       }
//     },

//     /**
//      * Is the query used by this component generated by the widget or provded by the app?
//      *
//      * @property {Boolean}
//      * @private
//      */
//     generatedQuery: {
//       value: false
//     }
//   },
//   methods: {
//     created: function() {
//       setTimeout(function() {
//         if (this.client && this._queryModel && !this.getAttribute('query-id') && !this.queryId && !this.query) {
//           this.query = this.client.createQuery({
//             model: this._queryModel
//         }
//       }, 1);
//     },
//     _updateQuery: function() {
//       // Allow this dom to finish being inserted into parent node so that size info can be available before rendering the items
//       setTimeout(this.render.bind(this), 1);
//       this.query.on('change', this._rerender, this);
//       this.client = this.query.client;
//     },

//     // Override this
//     render: function() {

//     },

//     // Override this
//     rerender: function() {

//     }
//   }
// };